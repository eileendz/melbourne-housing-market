{
  "message": "UnknownError: The events file runs/2019-10-13T13-01-49Z/logs/train/events.out.tfevents.1570971730.dyn-103-35-230-179.its.monash.edu.au.74199.1102.v2 has disappeared.\n\tFailed to flush 2 events to runs/2019-10-13T13-01-49Z/logs/train/events.out.tfevents.1570971730.dyn-103-35-230-179.its.monash.edu.au.74199.1102.v2\n\tCould not flush events file. [Op:FlushSummaryWriter]",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) {\n        result <- py_to_r(result)\n        if (is.null(result)) \n            invisible(result)\n        else result\n    }\n    else {\n        result\n    }\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 20L, epochs = 5L, \n    verbose = 1L, callbacks = list(<environment>, <environment>), \n    validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, x = <environment>, \n    y = <environment>)", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., train_x_cv, train_y_cv, validation_adta = list(validation_x, \n    validation_y), epoch = epoch_num, batch_size = FLAGS$batch_size)", "fit(., train_x_cv, train_y_cv, validation_adta = list(validation_x, \n    validation_y), epoch = epoch_num, batch_size = FLAGS$batch_size)", "function_list[[k]](value)", "withVisible(function_list[[k]](value))", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "model %>% fit(train_x_cv, train_y_cv, validation_adta = list(validation_x, \n    validation_y), epoch = epoch_num, batch_size = FLAGS$batch_size)", ".f(.x[[i]], ...)", "map(.x, .f, ...)", "map_df(1:k, cv_function)", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"house.R\", flags = list(dropout = c(0.2), learning_rate = c(1000), \n    epoch = c(5), batch_size = c(20)))"]
}
