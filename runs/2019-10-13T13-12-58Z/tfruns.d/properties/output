
> library(tidyverse)

> library(keras)

> library(rsample)

> library(recipes)

> # load data & cleaning
> house_less<- read_csv("data/MELBOURNE_HOUSE_PRICES_LESS.csv") %>% 
+   janitor::clean_names() %>% 
+   mutate(suburb = as_f .... [TRUNCATED] 

> # Then our problem can be re-phrased into: predict which category will the price 
> # falls into, which is a classification problem!
> 
> # no missi .... [TRUNCATED] 

> house_split <- initial_split(house_less, prop = 0.9)  

> train <- house_split %>% training()

> test <- house_split %>% testing()

> # pre-processing data 
> rec_obj <- train %>% 
+   recipe(price_class ~.) %>% 
+   step_center(all_numeric(),-all_outcomes()) %>% 
+   step_scale(al .... [TRUNCATED] 

> train_x <- bake(rec_obj,new_data = train) %>% select(-price_class) 

> train_x <- train_x %>% as.matrix()

> train_y <- to_categorical(pull(train, price_class), 10)

> test_x <- bake(rec_obj, new_data = test) %>% select(-price_class)

> test_y <- to_categorical(pull(test, price_class), 10)

> # NN model
> # dont really find a pre-trained architecture for house price forcasting, although there are articles on using ANN to predict
> # thus  .... [TRUNCATED] 

> k_clear_session()

> model <- keras_model_sequential() %>% 
+   layer_dropout(rate = FLAGS$dropout) %>% 
+   layer_dense(units = FLAGS$dense_unit1, activation = "relu",  .... [TRUNCATED] 

> # parameter tuning via cross validation
> 
> # cross validation
> # k <- 3 # could use 5 or 10 tho takes more time 
> # set.seed(92472)
> # ind <- s .... [TRUNCATED] 
