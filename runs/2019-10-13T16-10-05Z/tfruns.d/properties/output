
> library(tidyverse)

> library(keras)

> library(rsample)

> library(recipes)

> # load data & cleaning
> house_less<- read_csv("data/MELBOURNE_HOUSE_PRICES_LESS.csv") %>% 
+   janitor::clean_names() %>% 
+   mutate(suburb = as_f .... [TRUNCATED] 
|============                                                                  |  15%    1 MB|=============                                                                 |  16%    1 MB|==============                                                                |  18%    1 MB|===============                                                               |  19%    1 MB|================                                                              |  20%    1 MB|=================                                                             |  21%    1 MB|==================                                                            |  23%    1 MB|===================                                                           |  24%    1 MB|====================                                                          |  25%    1 MB|=====================                                                         |  26%    1 MB|======================                                                        |  27%    1 MB|=======================                                                       |  29%    2 MB|=======================                                                       |  30%    2 MB|========================                                                      |  31%    2 MB|=========================                                                     |  32%    2 MB|==========================                                                    |  34%    2 MB|===========================                                                   |  35%    2 MB|============================                                                  |  36%    2 MB|=============================                                                 |  37%    2 MB|==============================                                                |  38%    2 MB|===============================                                               |  40%    2 MB|================================                                              |  41%    2 MB|=================================                                             |  42%    2 MB|==================================                                            |  43%    3 MB|===================================                                           |  45%    3 MB|====================================                                          |  46%    3 MB|=====================================                                         |  47%    3 MB|======================================                                        |  48%    3 MB|=======================================                                       |  49%    3 MB|========================================                                      |  51%    3 MB|=========================================                                     |  52%    3 MB|==========================================                                    |  53%    3 MB|===========================================                                   |  54%    3 MB|============================================                                  |  56%    3 MB|=============================================                                 |  57%    3 MB|==============================================                                |  58%    4 MB|===============================================                               |  59%    4 MB|================================================                              |  60%    4 MB|=================================================                             |  62%    4 MB|==================================================                            |  63%    4 MB|===================================================                           |  64%    4 MB|====================================================                          |  65%    4 MB|====================================================                          |  67%    4 MB|=====================================================                         |  68%    4 MB|======================================================                        |  69%    4 MB|=======================================================                       |  70%    4 MB|========================================================                      |  71%    5 MB|=========================================================                     |  73%    5 MB|==========================================================                    |  74%    5 MB|===========================================================                   |  75%    5 MB|============================================================                  |  76%    5 MB|=============================================================                 |  78%    5 MB|==============================================================                |  79%    5 MB|===============================================================               |  80%    5 MB|================================================================              |  81%    5 MB|=================================================================             |  82%    5 MB|==================================================================            |  84%    5 MB|===================================================================           |  85%    5 MB|====================================================================          |  86%    6 MB|=====================================================================         |  87%    6 MB|======================================================================        |  89%    6 MB|=======================================================================       |  90%    6 MB|========================================================================      |  91%    6 MB|=========================================================================     |  92%    6 MB|==========================================================================    |  93%    6 MB|===========================================================================   |  95%    6 MB|============================================================================  |  96%    6 MB|============================================================================= |  97%    6 MB|==============================================================================|  98%    6 MB|===============================================================================| 100%    6 MB

> # Then our problem can be re-phrased into: predict which category will the price 
> # falls into, which is a classification problem!
> 
> # no missi .... [TRUNCATED] 

> house_split <- initial_split(house_less, prop = 0.9)  

> train <- house_split %>% training()

> test <- house_split %>% testing()

> # pre-processing data 
> rec_obj <- train %>% 
+   recipe(price_class ~.) %>% 
+   step_center(all_numeric(),-all_outcomes()) %>% 
+   step_scale(al .... [TRUNCATED] 

> train_x <- bake(rec_obj,new_data = train) %>% select(-price_class) 

> train_x <- train_x %>% as.matrix()

> train_y <- to_categorical(pull(train, price_class), 10)

> test_x <- bake(rec_obj, new_data = test) %>% select(-price_class)

> test_y <- to_categorical(pull(test, price_class), 10)

> # NN model
> # dont really find a pre-trained architecture for house price forcasting, although there are articles on using ANN to predict
> # thus  .... [TRUNCATED] 

> early_stop <- callback_early_stopping(monitor = "val_loss", patience = 2)

> k_clear_session()

> model <- keras_model_sequential() %>% 
+   layer_dropout(rate = FLAGS$dropout) %>% 
+   layer_dense(units = FLAGS$dense_unit1, activation = "relu",  .... [TRUNCATED] 

> # parameter tuning via cross validation
> 
> # cross validation
> # k <- 3 # could use 5 or 10 tho takes more time 
> # set.seed(92472)
> # ind <- s .... [TRUNCATED] 

> ind_result <- tibble::as_tibble(history$metrics)

> # For the nn, we could do something like "self-organizing map (SOM)" or "Learning vector quantization" (LVQ), 
> # which is popular for multi-label  .... [TRUNCATED] 
